SLURM_JOBID=8903469
SLURM_JOB_NODELIST=cpn-p27-18
SLURM_NNODES=1
SLURMTMPDIR=/scratch/8903469
working directory=/panfs/panfs.cbls.ccr.buffalo.edu/scratch/grp-alexeyak/mohammad/my_repositories/Tutorials_Libra/6_dynamics/2_nbra_workflows/7_step2_cp2k/2_xTB/2_hpc/job2
 The Intel 20.2 compilers are in your path. This is adequate for compiling and
running most codes. Source compilervars.sh for more features including the
debugger. 
 The Intel MPI 2020.2 is in your path. This is adequate for compiling and
running most codes. Run "source
/util/academic/intel/20.2/compilers_and_libraries_2020.2.254/linux/mpi/intel64/bin/mpivars.sh"
for more features including the debugger. 
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads
The translational vectors for the current periodic system are:

[[-1 -1  0]
 [-1  0  0]
 [-1  1  0]
 [ 0 -1  0]
 [ 0  1  0]
 [ 1 -1  0]
 [ 1  0  0]
 [ 1  1  0]]
Will compute the S^AO between R(0,0,0) and 9 translational vectors
-----------------------Start-----------------------
-----------------------Step 50-----------------------
**************** Running CP2K ****************
Step 50 Computing the OT method wfn file...
Done with OT wfn. Elapsed time: 2.952463150024414
Computing the wfn file using diagonalization method...
Done with diagonalization. Elapsed time: 1.9324357509613037
Done with step 50 Elapsed time: 4.916471719741821
Creating shell...
Done with creating shell. Elapsed time: 0.048455238342285156
Reading energies and eigenvectors....
Done with reading energies and eigenvectors. Elapsed time: 0.1597154140472412
Computing atomic orbital overlap matrix...
Computing the AO overlaps between R(-1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(-1,0,0) and R(0,0,0)
Computing the AO overlaps between R(-1,1,0) and R(0,0,0)
Computing the AO overlaps between R(0,-1,0) and R(0,0,0)
Computing the AO overlaps between R(0,1,0) and R(0,0,0)
Computing the AO overlaps between R(1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(1,0,0) and R(0,0,0)
Computing the AO overlaps between R(1,1,0) and R(0,0,0)
Done with computing atomic orbital overlaps. Elapsed time: 0.264934778213501
Turning the MATRIX to numpy array...
Done with transforming MATRIX 2 numpy array. Elapsed time: 0.027491092681884766
Resorting eigenvectors elements...
Done with resorting eigenvectors elements. Elapsed time: 0.00417780876159668
Computing and saving molecular orbital overlaps...
Done with computing molecular orbital overlaps. Elapsed time: 0.04564094543457031
Done with step 50. Elapsed time: 5.466964244842529
-----------------------Step 51-----------------------
**************** Running CP2K ****************
Step 51 Computing the OT method wfn file...
Done with OT wfn. Elapsed time: 2.053697109222412
Computing the wfn file using diagonalization method...
Done with diagonalization. Elapsed time: 1.8362600803375244
Done with step 51 Elapsed time: 3.920362949371338
Creating shell...
Done with creating shell. Elapsed time: 0.047286033630371094
Reading energies and eigenvectors....
Done with reading energies and eigenvectors. Elapsed time: 0.15952539443969727
Computing atomic orbital overlap matrix...
Computing the AO overlaps between R(-1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(-1,0,0) and R(0,0,0)
Computing the AO overlaps between R(-1,1,0) and R(0,0,0)
Computing the AO overlaps between R(0,-1,0) and R(0,0,0)
Computing the AO overlaps between R(0,1,0) and R(0,0,0)
Computing the AO overlaps between R(1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(1,0,0) and R(0,0,0)
Computing the AO overlaps between R(1,1,0) and R(0,0,0)
Done with computing atomic orbital overlaps. Elapsed time: 0.25551795959472656
Turning the MATRIX to numpy array...
Done with transforming MATRIX 2 numpy array. Elapsed time: 0.056681156158447266
Resorting eigenvectors elements...
Done with resorting eigenvectors elements. Elapsed time: 0.004179477691650391
Computing and saving molecular orbital overlaps...
Done with computing molecular orbital overlaps. Elapsed time: 0.08327603340148926
Removing unnecessary wfn files...
Done with step 51. Elapsed time: 4.561531066894531
-----------------------Step 52-----------------------
**************** Running CP2K ****************
Step 52 Computing the OT method wfn file...
Done with OT wfn. Elapsed time: 2.0589303970336914
Computing the wfn file using diagonalization method...
Done with diagonalization. Elapsed time: 1.8116474151611328
Done with step 52 Elapsed time: 3.919567823410034
Creating shell...
Done with creating shell. Elapsed time: 0.04847002029418945
Reading energies and eigenvectors....
Done with reading energies and eigenvectors. Elapsed time: 0.1587986946105957
Computing atomic orbital overlap matrix...
Computing the AO overlaps between R(-1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(-1,0,0) and R(0,0,0)
Computing the AO overlaps between R(-1,1,0) and R(0,0,0)
Computing the AO overlaps between R(0,-1,0) and R(0,0,0)
Computing the AO overlaps between R(0,1,0) and R(0,0,0)
Computing the AO overlaps between R(1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(1,0,0) and R(0,0,0)
Computing the AO overlaps between R(1,1,0) and R(0,0,0)
Done with computing atomic orbital overlaps. Elapsed time: 0.2504539489746094
Turning the MATRIX to numpy array...
Done with transforming MATRIX 2 numpy array. Elapsed time: 0.05570530891418457
Resorting eigenvectors elements...
Done with resorting eigenvectors elements. Elapsed time: 0.004262447357177734
Computing and saving molecular orbital overlaps...
Done with computing molecular orbital overlaps. Elapsed time: 0.053839683532714844
Removing unnecessary wfn files...
Done with step 52. Elapsed time: 4.520701169967651
-----------------------Step 53-----------------------
**************** Running CP2K ****************
Step 53 Computing the OT method wfn file...
Done with OT wfn. Elapsed time: 2.0862362384796143
Computing the wfn file using diagonalization method...
Done with diagonalization. Elapsed time: 1.825326919555664
Done with step 53 Elapsed time: 3.939150094985962
Creating shell...
Done with creating shell. Elapsed time: 0.04772496223449707
Reading energies and eigenvectors....
Done with reading energies and eigenvectors. Elapsed time: 0.15919923782348633
Computing atomic orbital overlap matrix...
Computing the AO overlaps between R(-1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(-1,0,0) and R(0,0,0)
Computing the AO overlaps between R(-1,1,0) and R(0,0,0)
Computing the AO overlaps between R(0,-1,0) and R(0,0,0)
Computing the AO overlaps between R(0,1,0) and R(0,0,0)
Computing the AO overlaps between R(1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(1,0,0) and R(0,0,0)
Computing the AO overlaps between R(1,1,0) and R(0,0,0)
Done with computing atomic orbital overlaps. Elapsed time: 0.24688363075256348
Turning the MATRIX to numpy array...
Done with transforming MATRIX 2 numpy array. Elapsed time: 0.055245161056518555
Resorting eigenvectors elements...
Done with resorting eigenvectors elements. Elapsed time: 0.004183530807495117
Computing and saving molecular orbital overlaps...
Done with computing molecular orbital overlaps. Elapsed time: 0.053868770599365234
Removing unnecessary wfn files...
Done with step 53. Elapsed time: 4.546721458435059
-----------------------Step 54-----------------------
**************** Running CP2K ****************
Step 54 Computing the OT method wfn file...
Done with OT wfn. Elapsed time: 2.0788397789001465
Computing the wfn file using diagonalization method...
Done with diagonalization. Elapsed time: 1.850264072418213
Done with step 54 Elapsed time: 3.9733355045318604
Creating shell...
Done with creating shell. Elapsed time: 0.04548835754394531
Reading energies and eigenvectors....
Done with reading energies and eigenvectors. Elapsed time: 0.17096328735351562
Computing atomic orbital overlap matrix...
Computing the AO overlaps between R(-1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(-1,0,0) and R(0,0,0)
Computing the AO overlaps between R(-1,1,0) and R(0,0,0)
Computing the AO overlaps between R(0,-1,0) and R(0,0,0)
Computing the AO overlaps between R(0,1,0) and R(0,0,0)
Computing the AO overlaps between R(1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(1,0,0) and R(0,0,0)
Computing the AO overlaps between R(1,1,0) and R(0,0,0)
Done with computing atomic orbital overlaps. Elapsed time: 0.2516026496887207
Turning the MATRIX to numpy array...
Done with transforming MATRIX 2 numpy array. Elapsed time: 0.055321455001831055
Resorting eigenvectors elements...
Done with resorting eigenvectors elements. Elapsed time: 0.004300355911254883
Computing and saving molecular orbital overlaps...
Done with computing molecular orbital overlaps. Elapsed time: 0.0493013858795166
Removing unnecessary wfn files...
Done with step 54. Elapsed time: 4.58013129234314
-----------------------Step 55-----------------------
**************** Running CP2K ****************
	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

Step 55 Computing the OT method wfn file...
Done with OT wfn. Elapsed time: 2.0957608222961426
Computing the wfn file using diagonalization method...
Done with diagonalization. Elapsed time: 1.8943018913269043
Done with step 55 Elapsed time: 4.026205062866211
Creating shell...
Done with creating shell. Elapsed time: 0.04715323448181152
Reading energies and eigenvectors....
Done with reading energies and eigenvectors. Elapsed time: 0.17720770835876465
Computing atomic orbital overlap matrix...
Computing the AO overlaps between R(-1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(-1,0,0) and R(0,0,0)
Computing the AO overlaps between R(-1,1,0) and R(0,0,0)
Computing the AO overlaps between R(0,-1,0) and R(0,0,0)
Computing the AO overlaps between R(0,1,0) and R(0,0,0)
Computing the AO overlaps between R(1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(1,0,0) and R(0,0,0)
Computing the AO overlaps between R(1,1,0) and R(0,0,0)
Done with computing atomic orbital overlaps. Elapsed time: 0.2639174461364746
Turning the MATRIX to numpy array...
Done with transforming MATRIX 2 numpy array. Elapsed time: 0.05542421340942383
Resorting eigenvectors elements...
Done with resorting eigenvectors elements. Elapsed time: 0.0044972896575927734
Computing and saving molecular orbital overlaps...
Done with computing molecular orbital overlaps. Elapsed time: 0.06686139106750488
Removing unnecessary wfn files...
Done with step 55. Elapsed time: 4.6775476932525635
-----------------------Step 56-----------------------
**************** Running CP2K ****************
Step 56 Computing the OT method wfn file...
Done with OT wfn. Elapsed time: 2.0813381671905518
Computing the wfn file using diagonalization method...
Done with diagonalization. Elapsed time: 1.8941152095794678
Done with step 56 Elapsed time: 4.00339150428772
Creating shell...
Done with creating shell. Elapsed time: 0.046784162521362305
Reading energies and eigenvectors....
Done with reading energies and eigenvectors. Elapsed time: 0.1714789867401123
Computing atomic orbital overlap matrix...
Computing the AO overlaps between R(-1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(-1,0,0) and R(0,0,0)
Computing the AO overlaps between R(-1,1,0) and R(0,0,0)
Computing the AO overlaps between R(0,-1,0) and R(0,0,0)
Computing the AO overlaps between R(0,1,0) and R(0,0,0)
Computing the AO overlaps between R(1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(1,0,0) and R(0,0,0)
Computing the AO overlaps between R(1,1,0) and R(0,0,0)
Done with computing atomic orbital overlaps. Elapsed time: 0.25028371810913086
Turning the MATRIX to numpy array...
Done with transforming MATRIX 2 numpy array. Elapsed time: 0.055629730224609375
Resorting eigenvectors elements...
Done with resorting eigenvectors elements. Elapsed time: 0.0042994022369384766
Computing and saving molecular orbital overlaps...
Done with computing molecular orbital overlaps. Elapsed time: 0.057755231857299805
Removing unnecessary wfn files...
Done with step 56. Elapsed time: 4.627610206604004
-----------------------Step 57-----------------------
**************** Running CP2K ****************
Step 57 Computing the OT method wfn file...
Done with OT wfn. Elapsed time: 2.1729657649993896
Computing the wfn file using diagonalization method...
Done with diagonalization. Elapsed time: 1.8053438663482666
Done with step 57 Elapsed time: 4.0069591999053955
Creating shell...
Done with creating shell. Elapsed time: 0.04390764236450195
Reading energies and eigenvectors....
Done with reading energies and eigenvectors. Elapsed time: 0.15422296524047852
Computing atomic orbital overlap matrix...
Computing the AO overlaps between R(-1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(-1,0,0) and R(0,0,0)
Computing the AO overlaps between R(-1,1,0) and R(0,0,0)
Computing the AO overlaps between R(0,-1,0) and R(0,0,0)
Computing the AO overlaps between R(0,1,0) and R(0,0,0)
Computing the AO overlaps between R(1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(1,0,0) and R(0,0,0)
Computing the AO overlaps between R(1,1,0) and R(0,0,0)
Done with computing atomic orbital overlaps. Elapsed time: 0.25020790100097656
Turning the MATRIX to numpy array...
Done with transforming MATRIX 2 numpy array. Elapsed time: 0.055373430252075195
Resorting eigenvectors elements...
Done with resorting eigenvectors elements. Elapsed time: 0.004181385040283203
Computing and saving molecular orbital overlaps...
Done with computing molecular orbital overlaps. Elapsed time: 0.050023555755615234
Removing unnecessary wfn files...
Done with step 57. Elapsed time: 4.60305380821228
-----------------------Step 58-----------------------
**************** Running CP2K ****************
Step 58 Computing the OT method wfn file...
Done with OT wfn. Elapsed time: 2.043851137161255
Computing the wfn file using diagonalization method...
Done with diagonalization. Elapsed time: 1.850440263748169
Done with step 58 Elapsed time: 3.92199444770813
Creating shell...
Done with creating shell. Elapsed time: 0.047351837158203125
Reading energies and eigenvectors....
Done with reading energies and eigenvectors. Elapsed time: 0.15954136848449707
Computing atomic orbital overlap matrix...
Computing the AO overlaps between R(-1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(-1,0,0) and R(0,0,0)
Computing the AO overlaps between R(-1,1,0) and R(0,0,0)
Computing the AO overlaps between R(0,-1,0) and R(0,0,0)
Computing the AO overlaps between R(0,1,0) and R(0,0,0)
Computing the AO overlaps between R(1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(1,0,0) and R(0,0,0)
Computing the AO overlaps between R(1,1,0) and R(0,0,0)
Done with computing atomic orbital overlaps. Elapsed time: 0.24830889701843262
Turning the MATRIX to numpy array...
Done with transforming MATRIX 2 numpy array. Elapsed time: 0.05528450012207031
Resorting eigenvectors elements...
Done with resorting eigenvectors elements. Elapsed time: 0.0041980743408203125
Computing and saving molecular orbital overlaps...
Done with computing molecular orbital overlaps. Elapsed time: 0.04742312431335449
Removing unnecessary wfn files...
Done with step 58. Elapsed time: 4.514632940292358
-----------------------Step 59-----------------------
**************** Running CP2K ****************
Step 59 Computing the OT method wfn file...
Done with OT wfn. Elapsed time: 2.0711262226104736
Computing the wfn file using diagonalization method...
Done with diagonalization. Elapsed time: 1.8511159420013428
Done with step 59 Elapsed time: 3.9490530490875244
Creating shell...
Done with creating shell. Elapsed time: 0.047528982162475586
Reading energies and eigenvectors....
Done with reading energies and eigenvectors. Elapsed time: 0.15967965126037598
Computing atomic orbital overlap matrix...
Computing the AO overlaps between R(-1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(-1,0,0) and R(0,0,0)
Computing the AO overlaps between R(-1,1,0) and R(0,0,0)
Computing the AO overlaps between R(0,-1,0) and R(0,0,0)
Computing the AO overlaps between R(0,1,0) and R(0,0,0)
Computing the AO overlaps between R(1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(1,0,0) and R(0,0,0)
Computing the AO overlaps between R(1,1,0) and R(0,0,0)
Done with computing atomic orbital overlaps. Elapsed time: 0.2472059726715088
Turning the MATRIX to numpy array...
Done with transforming MATRIX 2 numpy array. Elapsed time: 0.05530595779418945
Resorting eigenvectors elements...
Done with resorting eigenvectors elements. Elapsed time: 0.004259586334228516
Computing and saving molecular orbital overlaps...
Done with computing molecular orbital overlaps. Elapsed time: 0.0619504451751709
Removing unnecessary wfn files...
Done with step 59. Elapsed time: 4.564601898193359
-----------------------Step 60-----------------------
**************** Running CP2K ****************
Step 60 Computing the OT method wfn file...
Done with OT wfn. Elapsed time: 2.2904210090637207
Computing the wfn file using diagonalization method...
Done with diagonalization. Elapsed time: 1.8604755401611328
Done with step 60 Elapsed time: 4.17875862121582
Creating shell...
Done with creating shell. Elapsed time:
	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads
 0.04766726493835449
Reading energies and eigenvectors....
Done with reading energies and eigenvectors. Elapsed time: 0.17366743087768555
Computing atomic orbital overlap matrix...
Computing the AO overlaps between R(-1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(-1,0,0) and R(0,0,0)
Computing the AO overlaps between R(-1,1,0) and R(0,0,0)
Computing the AO overlaps between R(0,-1,0) and R(0,0,0)
Computing the AO overlaps between R(0,1,0) and R(0,0,0)
Computing the AO overlaps between R(1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(1,0,0) and R(0,0,0)
Computing the AO overlaps between R(1,1,0) and R(0,0,0)
Done with computing atomic orbital overlaps. Elapsed time: 0.2698798179626465
Turning the MATRIX to numpy array...
Done with transforming MATRIX 2 numpy array. Elapsed time: 0.05536174774169922
Resorting eigenvectors elements...
Done with resorting eigenvectors elements. Elapsed time: 0.004283905029296875
Computing and saving molecular orbital overlaps...
Done with computing molecular orbital overlaps. Elapsed time: 0.049155473709106445
Removing unnecessary wfn files...
Done with step 60. Elapsed time: 4.809977293014526
-----------------------Step 61-----------------------
**************** Running CP2K ****************
Step 61 Computing the OT method wfn file...
Done with OT wfn. Elapsed time: 2.058056592941284
Computing the wfn file using diagonalization method...
Done with diagonalization. Elapsed time: 1.9093821048736572
Done with step 61 Elapsed time: 3.9936368465423584
Creating shell...
Done with creating shell. Elapsed time: 0.0471346378326416
Reading energies and eigenvectors....
Done with reading energies and eigenvectors. Elapsed time: 0.17399048805236816
Computing atomic orbital overlap matrix...
Computing the AO overlaps between R(-1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(-1,0,0) and R(0,0,0)
Computing the AO overlaps between R(-1,1,0) and R(0,0,0)
Computing the AO overlaps between R(0,-1,0) and R(0,0,0)
Computing the AO overlaps between R(0,1,0) and R(0,0,0)
Computing the AO overlaps between R(1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(1,0,0) and R(0,0,0)
Computing the AO overlaps between R(1,1,0) and R(0,0,0)
Done with computing atomic orbital overlaps. Elapsed time: 0.2532365322113037
Turning the MATRIX to numpy array...
Done with transforming MATRIX 2 numpy array. Elapsed time: 0.05505037307739258
Resorting eigenvectors elements...
Done with resorting eigenvectors elements. Elapsed time: 0.004281520843505859
Computing and saving molecular orbital overlaps...
Done with computing molecular orbital overlaps. Elapsed time: 0.07549285888671875
Removing unnecessary wfn files...
Done with step 61. Elapsed time: 4.645329713821411
-----------------------Step 62-----------------------
**************** Running CP2K ****************
Step 62 Computing the OT method wfn file...
Done with OT wfn. Elapsed time: 2.036710500717163
Computing the wfn file using diagonalization method...
Done with diagonalization. Elapsed time: 1.8741471767425537
Done with step 62 Elapsed time: 3.938023567199707
Creating shell...
Done with creating shell. Elapsed time: 0.04811286926269531
Reading energies and eigenvectors....
Done with reading energies and eigenvectors. Elapsed time: 0.15919971466064453
Computing atomic orbital overlap matrix...
Computing the AO overlaps between R(-1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(-1,0,0) and R(0,0,0)
Computing the AO overlaps between R(-1,1,0) and R(0,0,0)
Computing the AO overlaps between R(0,-1,0) and R(0,0,0)
Computing the AO overlaps between R(0,1,0) and R(0,0,0)
Computing the AO overlaps between R(1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(1,0,0) and R(0,0,0)
Computing the AO overlaps between R(1,1,0) and R(0,0,0)
Done with computing atomic orbital overlaps. Elapsed time: 0.2476046085357666
Turning the MATRIX to numpy array...
Done with transforming MATRIX 2 numpy array. Elapsed time: 0.056154489517211914
Resorting eigenvectors elements...
Done with resorting eigenvectors elements. Elapsed time: 0.004543304443359375
Computing and saving molecular orbital overlaps...
Done with computing molecular orbital overlaps. Elapsed time: 0.05037879943847656
Removing unnecessary wfn files...
Done with step 62. Elapsed time: 4.53489351272583
-----------------------Step 63-----------------------
**************** Running CP2K ****************
Step 63 Computing the OT method wfn file...
Done with OT wfn. Elapsed time: 2.0980947017669678
Computing the wfn file using diagonalization method...
Done with diagonalization. Elapsed time: 1.8621153831481934
Done with step 63 Elapsed time: 4.0072197914123535
Creating shell...
Done with creating shell. Elapsed time: 0.04744982719421387
Reading energies and eigenvectors....
Done with reading energies and eigenvectors. Elapsed time: 0.15917348861694336
Computing atomic orbital overlap matrix...
Computing the AO overlaps between R(-1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(-1,0,0) and R(0,0,0)
Computing the AO overlaps between R(-1,1,0) and R(0,0,0)
Computing the AO overlaps between R(0,-1,0) and R(0,0,0)
Computing the AO overlaps between R(0,1,0) and R(0,0,0)
Computing the AO overlaps between R(1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(1,0,0) and R(0,0,0)
Computing the AO overlaps between R(1,1,0) and R(0,0,0)
Done with computing atomic orbital overlaps. Elapsed time: 0.29490089416503906
Turning the MATRIX to numpy array...
Done with transforming MATRIX 2 numpy array. Elapsed time: 0.055126190185546875
Resorting eigenvectors elements...
Done with resorting eigenvectors elements. Elapsed time: 0.0042116641998291016
Computing and saving molecular orbital overlaps...
Done with computing molecular orbital overlaps. Elapsed time: 0.05273127555847168
Removing unnecessary wfn files...
Done with step 63. Elapsed time: 4.657550096511841
-----------------------Step 64-----------------------
**************** Running CP2K ****************
Step 64 Computing the OT method wfn file...
Done with OT wfn. Elapsed time: 2.0330069065093994
Computing the wfn file using diagonalization method...
Done with diagonalization. Elapsed time: 1.9479331970214844
Done with step 64 Elapsed time: 4.045397520065308
Creating shell...
Done with creating shell. Elapsed time: 0.047463417053222656
Reading energies and eigenvectors....
Done with reading energies and eigenvectors. Elapsed time: 0.16025972366333008
Computing atomic orbital overlap matrix...
Computing the AO overlaps between R(-1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(-1,0,0) and R(0,0,0)
Computing the AO overlaps between R(-1,1,0) and R(0,0,0)
Computing the AO overlaps between R(0,-1,0) and R(0,0,0)
Computing the AO overlaps between R(0,1,0) and R(0,0,0)
Computing the AO overlaps between R(1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(1,0,0) and R(0,0,0)
Computing the AO overlaps between R(1,1,0) and R(0,0,0)
Done with computing atomic orbital overlaps. Elapsed time: 0.28971004486083984
Turning the MATRIX to numpy array...
Done with transforming MATRIX 2 numpy array. Elapsed time: 0.055228471755981445
Resorting eigenvectors elements...
Done with resorting eigenvectors elements. Elapsed time: 0.004160404205322266
Computing and saving molecular orbital overlaps...
Done with computing molecular orbital overlaps. Elapsed time: 0.11809754371643066
Removing unnecessary wfn files...
Done with step 64. Elapsed time: 4.805721044540405
-----------------------Step 65-----------------------
**************** Running CP2K ****************
Step 65 Computing the OT method wfn file...
Done with OT wfn. Elapsed time: 2.098275899887085
Computing the wfn file using diagonalization method...
Done with diagonalization. Elapsed time: 1.8401830196380615
Done with step 65 Elapsed time: 3.9768385887145996
Creating shell...
Done with creating shell. Elapsed time: 0.04535698890686035
Reading energies and eigenvectors....
Done with reading energies and eigenvectors. Elapsed time: 0.15590214729309082
Computing atomic orbital overlap matrix...
Computing the AO overlaps between R(-1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(-1,0,0) and R(0,0,0)
Computing the AO overlaps between R(-1,1,0) and R(0,0,0)
	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

Computing the AO overlaps between R(0,-1,0) and R(0,0,0)
Computing the AO overlaps between R(0,1,0) and R(0,0,0)
Computing the AO overlaps between R(1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(1,0,0) and R(0,0,0)
Computing the AO overlaps between R(1,1,0) and R(0,0,0)
Done with computing atomic orbital overlaps. Elapsed time: 0.24835419654846191
Turning the MATRIX to numpy array...
Done with transforming MATRIX 2 numpy array. Elapsed time: 0.05520176887512207
Resorting eigenvectors elements...
Done with resorting eigenvectors elements. Elapsed time: 0.004180192947387695
Computing and saving molecular orbital overlaps...
Done with computing molecular orbital overlaps. Elapsed time: 0.06564044952392578
Removing unnecessary wfn files...
Done with step 65. Elapsed time: 4.580995798110962
-----------------------Step 66-----------------------
**************** Running CP2K ****************
Step 66 Computing the OT method wfn file...
Done with OT wfn. Elapsed time: 2.0343494415283203
Computing the wfn file using diagonalization method...
Done with diagonalization. Elapsed time: 1.8753442764282227
Done with step 66 Elapsed time: 3.945742607116699
Creating shell...
Done with creating shell. Elapsed time: 0.04738140106201172
Reading energies and eigenvectors....
Done with reading energies and eigenvectors. Elapsed time: 0.1603844165802002
Computing atomic orbital overlap matrix...
Computing the AO overlaps between R(-1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(-1,0,0) and R(0,0,0)
Computing the AO overlaps between R(-1,1,0) and R(0,0,0)
Computing the AO overlaps between R(0,-1,0) and R(0,0,0)
Computing the AO overlaps between R(0,1,0) and R(0,0,0)
Computing the AO overlaps between R(1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(1,0,0) and R(0,0,0)
Computing the AO overlaps between R(1,1,0) and R(0,0,0)
Done with computing atomic orbital overlaps. Elapsed time: 0.2941246032714844
Turning the MATRIX to numpy array...
Done with transforming MATRIX 2 numpy array. Elapsed time: 0.05524706840515137
Resorting eigenvectors elements...
Done with resorting eigenvectors elements. Elapsed time: 0.004177570343017578
Computing and saving molecular orbital overlaps...
Done with computing molecular orbital overlaps. Elapsed time: 0.050675153732299805
Removing unnecessary wfn files...
Done with step 66. Elapsed time: 4.618690013885498
-----------------------Step 67-----------------------
**************** Running CP2K ****************
Step 67 Computing the OT method wfn file...
Done with OT wfn. Elapsed time: 2.028057336807251
Computing the wfn file using diagonalization method...
Done with diagonalization. Elapsed time: 1.9131898880004883
Done with step 67 Elapsed time: 3.969012498855591
Creating shell...
Done with creating shell. Elapsed time: 0.047120094299316406
Reading energies and eigenvectors....
Done with reading energies and eigenvectors. Elapsed time: 0.15954160690307617
Computing atomic orbital overlap matrix...
Computing the AO overlaps between R(-1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(-1,0,0) and R(0,0,0)
Computing the AO overlaps between R(-1,1,0) and R(0,0,0)
Computing the AO overlaps between R(0,-1,0) and R(0,0,0)
Computing the AO overlaps between R(0,1,0) and R(0,0,0)
Computing the AO overlaps between R(1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(1,0,0) and R(0,0,0)
Computing the AO overlaps between R(1,1,0) and R(0,0,0)
Done with computing atomic orbital overlaps. Elapsed time: 0.24787044525146484
Turning the MATRIX to numpy array...
Done with transforming MATRIX 2 numpy array. Elapsed time: 0.05509018898010254
Resorting eigenvectors elements...
Done with resorting eigenvectors elements. Elapsed time: 0.004160165786743164
Computing and saving molecular orbital overlaps...
Done with computing molecular orbital overlaps. Elapsed time: 0.07016468048095703
Removing unnecessary wfn files...
Done with step 67. Elapsed time: 4.59304141998291
-----------------------Step 68-----------------------
**************** Running CP2K ****************
Step 68 Computing the OT method wfn file...
Done with OT wfn. Elapsed time: 2.046173334121704
Computing the wfn file using diagonalization method...
Done with diagonalization. Elapsed time: 1.84627366065979
Done with step 68 Elapsed time: 3.928943634033203
Creating shell...
Done with creating shell. Elapsed time: 0.047675371170043945
Reading energies and eigenvectors....
Done with reading energies and eigenvectors. Elapsed time: 0.16039228439331055
Computing atomic orbital overlap matrix...
Computing the AO overlaps between R(-1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(-1,0,0) and R(0,0,0)
Computing the AO overlaps between R(-1,1,0) and R(0,0,0)
Computing the AO overlaps between R(0,-1,0) and R(0,0,0)
Computing the AO overlaps between R(0,1,0) and R(0,0,0)
Computing the AO overlaps between R(1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(1,0,0) and R(0,0,0)
Computing the AO overlaps between R(1,1,0) and R(0,0,0)
Done with computing atomic orbital overlaps. Elapsed time: 0.2503211498260498
Turning the MATRIX to numpy array...
Done with transforming MATRIX 2 numpy array. Elapsed time: 0.0554499626159668
Resorting eigenvectors elements...
Done with resorting eigenvectors elements. Elapsed time: 0.004218101501464844
Computing and saving molecular orbital overlaps...
Done with computing molecular orbital overlaps. Elapsed time: 0.07795476913452148
Removing unnecessary wfn files...
Done with step 68. Elapsed time: 4.555253982543945
-----------------------Step 69-----------------------
**************** Running CP2K ****************
Step 69 Computing the OT method wfn file...
Done with OT wfn. Elapsed time: 2.0756356716156006
Computing the wfn file using diagonalization method...
Done with diagonalization. Elapsed time: 1.7989537715911865
Done with step 69 Elapsed time: 3.9323110580444336
Creating shell...
Done with creating shell. Elapsed time: 0.04440736770629883
Reading energies and eigenvectors....
Done with reading energies and eigenvectors. Elapsed time: 0.1543877124786377
Computing atomic orbital overlap matrix...
Computing the AO overlaps between R(-1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(-1,0,0) and R(0,0,0)
Computing the AO overlaps between R(-1,1,0) and R(0,0,0)
Computing the AO overlaps between R(0,-1,0) and R(0,0,0)
Computing the AO overlaps between R(0,1,0) and R(0,0,0)
Computing the AO overlaps between R(1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(1,0,0) and R(0,0,0)
Computing the AO overlaps between R(1,1,0) and R(0,0,0)
Done with computing atomic orbital overlaps. Elapsed time: 0.24820613861083984
Turning the MATRIX to numpy array...
Done with transforming MATRIX 2 numpy array. Elapsed time: 0.05511617660522461
Resorting eigenvectors elements...
Done with resorting eigenvectors elements. Elapsed time: 0.004167795181274414
Computing and saving molecular orbital overlaps...
Done with computing molecular orbital overlaps. Elapsed time: 0.06840705871582031
Removing unnecessary wfn files...
Done with step 69. Elapsed time: 4.537677764892578
-----------------------Step 70-----------------------
**************** Running CP2K ****************
Step 70 Computing the OT method wfn file...
Done with OT wfn. Elapsed time: 2.001014232635498
Computing the wfn file using diagonalization method...
Done with diagonalization. Elapsed time: 1.9280881881713867
Done with step 70 Elapsed time: 3.96779465675354
Creating shell...
Done with creating shell. Elapsed time: 0.047800540924072266
Reading energies and eigenvectors....
Done with reading energies and eigenvectors. Elapsed time: 0.1734464168548584
Computing atomic orbital overlap matrix...
Computing the AO overlaps between R(-1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(-1,0,0) and R(0,0,0)
Computing the AO overlaps between R(-1,1,0) and R(0,0,0)
Computing the AO overlaps between R(0,-1,0) and R(0,0,0)
Computing the AO overlaps between R(0,1,0) and R(0,0,0)
Computing the AO overlaps between R(1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(1,0,0) and R(0,0,0)
Computing the AO overlaps between R(1,1,0) and R(0,0,0)
Done with computing atomic orbital overlaps. Elapsed time:
	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads
 0.25107288360595703
Turning the MATRIX to numpy array...
Done with transforming MATRIX 2 numpy array. Elapsed time: 0.055312156677246094
Resorting eigenvectors elements...
Done with resorting eigenvectors elements. Elapsed time: 0.004275083541870117
Computing and saving molecular orbital overlaps...
Done with computing molecular orbital overlaps. Elapsed time: 0.046283721923828125
Removing unnecessary wfn files...
Done with step 70. Elapsed time: 4.578205347061157
-----------------------Step 71-----------------------
**************** Running CP2K ****************
Step 71 Computing the OT method wfn file...
Done with OT wfn. Elapsed time: 2.0478599071502686
Computing the wfn file using diagonalization method...
Done with diagonalization. Elapsed time: 1.8623125553131104
Done with step 71 Elapsed time: 3.9377541542053223
Creating shell...
Done with creating shell. Elapsed time: 0.04635453224182129
Reading energies and eigenvectors....
Done with reading energies and eigenvectors. Elapsed time: 0.17156481742858887
Computing atomic orbital overlap matrix...
Computing the AO overlaps between R(-1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(-1,0,0) and R(0,0,0)
Computing the AO overlaps between R(-1,1,0) and R(0,0,0)
Computing the AO overlaps between R(0,-1,0) and R(0,0,0)
Computing the AO overlaps between R(0,1,0) and R(0,0,0)
Computing the AO overlaps between R(1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(1,0,0) and R(0,0,0)
Computing the AO overlaps between R(1,1,0) and R(0,0,0)
Done with computing atomic orbital overlaps. Elapsed time: 0.25327277183532715
Turning the MATRIX to numpy array...
Done with transforming MATRIX 2 numpy array. Elapsed time: 0.055149078369140625
Resorting eigenvectors elements...
Done with resorting eigenvectors elements. Elapsed time: 0.004273414611816406
Computing and saving molecular orbital overlaps...
Done with computing molecular orbital overlaps. Elapsed time: 0.06418299674987793
Removing unnecessary wfn files...
Done with step 71. Elapsed time: 4.563260078430176
-----------------------Step 72-----------------------
**************** Running CP2K ****************
Step 72 Computing the OT method wfn file...
Done with OT wfn. Elapsed time: 1.981349229812622
Computing the wfn file using diagonalization method...
Done with diagonalization. Elapsed time: 1.8790137767791748
Done with step 72 Elapsed time: 3.8863558769226074
Creating shell...
Done with creating shell. Elapsed time: 0.047179222106933594
Reading energies and eigenvectors....
Done with reading energies and eigenvectors. Elapsed time: 0.16030287742614746
Computing atomic orbital overlap matrix...
Computing the AO overlaps between R(-1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(-1,0,0) and R(0,0,0)
Computing the AO overlaps between R(-1,1,0) and R(0,0,0)
Computing the AO overlaps between R(0,-1,0) and R(0,0,0)
Computing the AO overlaps between R(0,1,0) and R(0,0,0)
Computing the AO overlaps between R(1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(1,0,0) and R(0,0,0)
Computing the AO overlaps between R(1,1,0) and R(0,0,0)
Done with computing atomic orbital overlaps. Elapsed time: 0.27503252029418945
Turning the MATRIX to numpy array...
Done with transforming MATRIX 2 numpy array. Elapsed time: 0.055364131927490234
Resorting eigenvectors elements...
Done with resorting eigenvectors elements. Elapsed time: 0.004178762435913086
Computing and saving molecular orbital overlaps...
Done with computing molecular orbital overlaps. Elapsed time: 0.12373733520507812
Removing unnecessary wfn files...
Done with step 72. Elapsed time: 4.582296371459961
-----------------------Step 73-----------------------
**************** Running CP2K ****************
Step 73 Computing the OT method wfn file...
Done with OT wfn. Elapsed time: 2.0540030002593994
Computing the wfn file using diagonalization method...
Done with diagonalization. Elapsed time: 1.834913730621338
Done with step 73 Elapsed time: 3.9138400554656982
Creating shell...
Done with creating shell. Elapsed time: 0.04742884635925293
Reading energies and eigenvectors....
Done with reading energies and eigenvectors. Elapsed time: 0.1619729995727539
Computing atomic orbital overlap matrix...
Computing the AO overlaps between R(-1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(-1,0,0) and R(0,0,0)
Computing the AO overlaps between R(-1,1,0) and R(0,0,0)
Computing the AO overlaps between R(0,-1,0) and R(0,0,0)
Computing the AO overlaps between R(0,1,0) and R(0,0,0)
Computing the AO overlaps between R(1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(1,0,0) and R(0,0,0)
Computing the AO overlaps between R(1,1,0) and R(0,0,0)
Done with computing atomic orbital overlaps. Elapsed time: 0.24892425537109375
Turning the MATRIX to numpy array...
Done with transforming MATRIX 2 numpy array. Elapsed time: 0.05613565444946289
Resorting eigenvectors elements...
Done with resorting eigenvectors elements. Elapsed time: 0.004162311553955078
Computing and saving molecular orbital overlaps...
Done with computing molecular orbital overlaps. Elapsed time: 0.05155754089355469
Removing unnecessary wfn files...
Done with step 73. Elapsed time: 4.516922473907471
-----------------------Step 74-----------------------
**************** Running CP2K ****************
Step 74 Computing the OT method wfn file...
Done with OT wfn. Elapsed time: 2.070756435394287
Computing the wfn file using diagonalization method...
Done with diagonalization. Elapsed time: 1.870774745941162
Done with step 74 Elapsed time: 3.9859354496002197
Creating shell...
Done with creating shell. Elapsed time: 0.04715132713317871
Reading energies and eigenvectors....
Done with reading energies and eigenvectors. Elapsed time: 0.1594693660736084
Computing atomic orbital overlap matrix...
Computing the AO overlaps between R(-1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(-1,0,0) and R(0,0,0)
Computing the AO overlaps between R(-1,1,0) and R(0,0,0)
Computing the AO overlaps between R(0,-1,0) and R(0,0,0)
Computing the AO overlaps between R(0,1,0) and R(0,0,0)
Computing the AO overlaps between R(1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(1,0,0) and R(0,0,0)
Computing the AO overlaps between R(1,1,0) and R(0,0,0)
Done with computing atomic orbital overlaps. Elapsed time: 0.24778437614440918
Turning the MATRIX to numpy array...
Done with transforming MATRIX 2 numpy array. Elapsed time: 0.055132389068603516
Resorting eigenvectors elements...
Done with resorting eigenvectors elements. Elapsed time: 0.004163980484008789
Computing and saving molecular orbital overlaps...
Done with computing molecular orbital overlaps. Elapsed time: 0.053154945373535156
Removing unnecessary wfn files...
Done with step 74. Elapsed time: 4.598306179046631
-----------------------Step 75-----------------------
**************** Running CP2K ****************
Step 75 Computing the OT method wfn file...
Done with OT wfn. Elapsed time: 2.0119714736938477
Computing the wfn file using diagonalization method...
Done with diagonalization. Elapsed time: 1.8411056995391846
Done with step 75 Elapsed time: 3.8787641525268555
Creating shell...
Done with creating shell. Elapsed time: 0.047997474670410156
Reading energies and eigenvectors....
Done with reading energies and eigenvectors. Elapsed time: 0.15923237800598145
Computing atomic orbital overlap matrix...
Computing the AO overlaps between R(-1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(-1,0,0) and R(0,0,0)
Computing the AO overlaps between R(-1,1,0) and R(0,0,0)
Computing the AO overlaps between R(0,-1,0) and R(0,0,0)
Computing the AO overlaps between R(0,1,0) and R(0,0,0)
Computing the AO overlaps between R(1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(1,0,0) and R(0,0,0)
Computing the AO overlaps between R(1,1,0) and R(0,0,0)
Done with computing atomic orbital overlaps. Elapsed time: 0.2611687183380127
Turning the MATRIX to numpy array...
Done with transforming MATRIX 2 numpy array. Elapsed time: 0.05534172058105469
Resorting eigenvectors elements...
Done with resorting eigenvectors elements. Elapsed time: 0.004204273223876953
Computing and saving molecular orbital overlaps...
	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

Done with computing molecular orbital overlaps. Elapsed time: 0.05838823318481445
Removing unnecessary wfn files...
Done with step 75. Elapsed time: 4.513724088668823
-----------------------Step 76-----------------------
**************** Running CP2K ****************
Step 76 Computing the OT method wfn file...
Done with OT wfn. Elapsed time: 2.0750973224639893
Computing the wfn file using diagonalization method...
Done with diagonalization. Elapsed time: 1.9522740840911865
Done with step 76 Elapsed time: 4.052968740463257
Creating shell...
Done with creating shell. Elapsed time: 0.04703354835510254
Reading energies and eigenvectors....
Done with reading energies and eigenvectors. Elapsed time: 0.15869975090026855
Computing atomic orbital overlap matrix...
Computing the AO overlaps between R(-1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(-1,0,0) and R(0,0,0)
Computing the AO overlaps between R(-1,1,0) and R(0,0,0)
Computing the AO overlaps between R(0,-1,0) and R(0,0,0)
Computing the AO overlaps between R(0,1,0) and R(0,0,0)
Computing the AO overlaps between R(1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(1,0,0) and R(0,0,0)
Computing the AO overlaps between R(1,1,0) and R(0,0,0)
Done with computing atomic orbital overlaps. Elapsed time: 0.2501232624053955
Turning the MATRIX to numpy array...
Done with transforming MATRIX 2 numpy array. Elapsed time: 0.0556027889251709
Resorting eigenvectors elements...
Done with resorting eigenvectors elements. Elapsed time: 0.004292726516723633
Computing and saving molecular orbital overlaps...
Done with computing molecular orbital overlaps. Elapsed time: 0.08213353157043457
Removing unnecessary wfn files...
Done with step 76. Elapsed time: 4.698864459991455
-----------------------Step 77-----------------------
**************** Running CP2K ****************
Step 77 Computing the OT method wfn file...
Done with OT wfn. Elapsed time: 2.025700330734253
Computing the wfn file using diagonalization method...
Done with diagonalization. Elapsed time: 1.824223518371582
Done with step 77 Elapsed time: 3.879983901977539
Creating shell...
Done with creating shell. Elapsed time: 0.04717755317687988
Reading energies and eigenvectors....
Done with reading energies and eigenvectors. Elapsed time: 0.15931034088134766
Computing atomic orbital overlap matrix...
Computing the AO overlaps between R(-1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(-1,0,0) and R(0,0,0)
Computing the AO overlaps between R(-1,1,0) and R(0,0,0)
Computing the AO overlaps between R(0,-1,0) and R(0,0,0)
Computing the AO overlaps between R(0,1,0) and R(0,0,0)
Computing the AO overlaps between R(1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(1,0,0) and R(0,0,0)
Computing the AO overlaps between R(1,1,0) and R(0,0,0)
Done with computing atomic orbital overlaps. Elapsed time: 0.24814343452453613
Turning the MATRIX to numpy array...
Done with transforming MATRIX 2 numpy array. Elapsed time: 0.055075645446777344
Resorting eigenvectors elements...
Done with resorting eigenvectors elements. Elapsed time: 0.0041582584381103516
Computing and saving molecular orbital overlaps...
Done with computing molecular orbital overlaps. Elapsed time: 0.06150507926940918
Removing unnecessary wfn files...
Done with step 77. Elapsed time: 4.496379613876343
-----------------------Step 78-----------------------
**************** Running CP2K ****************
Step 78 Computing the OT method wfn file...
Done with OT wfn. Elapsed time: 2.1095998287200928
Computing the wfn file using diagonalization method...
Done with diagonalization. Elapsed time: 1.8261704444885254
Done with step 78 Elapsed time: 3.9746463298797607
Creating shell...
Done with creating shell. Elapsed time: 0.04687047004699707
Reading energies and eigenvectors....
Done with reading energies and eigenvectors. Elapsed time: 0.16003632545471191
Computing atomic orbital overlap matrix...
Computing the AO overlaps between R(-1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(-1,0,0) and R(0,0,0)
Computing the AO overlaps between R(-1,1,0) and R(0,0,0)
Computing the AO overlaps between R(0,-1,0) and R(0,0,0)
Computing the AO overlaps between R(0,1,0) and R(0,0,0)
Computing the AO overlaps between R(1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(1,0,0) and R(0,0,0)
Computing the AO overlaps between R(1,1,0) and R(0,0,0)
Done with computing atomic orbital overlaps. Elapsed time: 0.2483360767364502
Turning the MATRIX to numpy array...
Done with transforming MATRIX 2 numpy array. Elapsed time: 0.056147098541259766
Resorting eigenvectors elements...
Done with resorting eigenvectors elements. Elapsed time: 0.004175424575805664
Computing and saving molecular orbital overlaps...
Done with computing molecular orbital overlaps. Elapsed time: 0.0631554126739502
Removing unnecessary wfn files...
Done with step 78. Elapsed time: 4.586750507354736
-----------------------Step 79-----------------------
**************** Running CP2K ****************
Step 79 Computing the OT method wfn file...
Done with OT wfn. Elapsed time: 2.1137454509735107
Computing the wfn file using diagonalization method...
Done with diagonalization. Elapsed time: 1.872727870941162
Done with step 79 Elapsed time: 4.013373613357544
Creating shell...
Done with creating shell. Elapsed time: 0.04188346862792969
Reading energies and eigenvectors....
Done with reading energies and eigenvectors. Elapsed time: 0.15155768394470215
Computing atomic orbital overlap matrix...
Computing the AO overlaps between R(-1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(-1,0,0) and R(0,0,0)
Computing the AO overlaps between R(-1,1,0) and R(0,0,0)
Computing the AO overlaps between R(0,-1,0) and R(0,0,0)
Computing the AO overlaps between R(0,1,0) and R(0,0,0)
Computing the AO overlaps between R(1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(1,0,0) and R(0,0,0)
Computing the AO overlaps between R(1,1,0) and R(0,0,0)
Done with computing atomic orbital overlaps. Elapsed time: 0.26431703567504883
Turning the MATRIX to numpy array...
Done with transforming MATRIX 2 numpy array. Elapsed time: 0.055243730545043945
Resorting eigenvectors elements...
Done with resorting eigenvectors elements. Elapsed time: 0.004178524017333984
Computing and saving molecular orbital overlaps...
Done with computing molecular orbital overlaps. Elapsed time: 0.06142449378967285
Removing unnecessary wfn files...
Done with step 79. Elapsed time: 4.623137474060059
-----------------------Step 80-----------------------
**************** Running CP2K ****************
Step 80 Computing the OT method wfn file...
Done with OT wfn. Elapsed time: 2.100510597229004
Computing the wfn file using diagonalization method...
Done with diagonalization. Elapsed time: 1.8693065643310547
Done with step 80 Elapsed time: 3.995685577392578
Creating shell...
Done with creating shell. Elapsed time: 0.0446016788482666
Reading energies and eigenvectors....
Done with reading energies and eigenvectors. Elapsed time: 0.1699364185333252
Computing atomic orbital overlap matrix...
Computing the AO overlaps between R(-1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(-1,0,0) and R(0,0,0)
Computing the AO overlaps between R(-1,1,0) and R(0,0,0)
Computing the AO overlaps between R(0,-1,0) and R(0,0,0)
Computing the AO overlaps between R(0,1,0) and R(0,0,0)
Computing the AO overlaps between R(1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(1,0,0) and R(0,0,0)
Computing the AO overlaps between R(1,1,0) and R(0,0,0)
Done with computing atomic orbital overlaps. Elapsed time: 0.293454647064209
Turning the MATRIX to numpy array...
Done with transforming MATRIX 2 numpy array. Elapsed time: 0.055661916732788086
Resorting eigenvectors elements...
Done with resorting eigenvectors elements. Elapsed time: 0.004401445388793945
Computing and saving molecular orbital overlaps...
Done with computing molecular orbital overlaps. Elapsed time: 0.048854827880859375
Removing unnecessary wfn files...
Done with step 80. Elapsed time: 4.678632736206055
-----------------------Step 81-----------------------
**************** Running CP2K ****************
Step 81 Computing the OT method wfn file...
	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

Done with OT wfn. Elapsed time: 2.1831297874450684
Computing the wfn file using diagonalization method...
Done with diagonalization. Elapsed time: 1.8526155948638916
Done with step 81 Elapsed time: 4.061915397644043
Creating shell...
Done with creating shell. Elapsed time: 0.04766249656677246
Reading energies and eigenvectors....
Done with reading energies and eigenvectors. Elapsed time: 0.17411279678344727
Computing atomic orbital overlap matrix...
Computing the AO overlaps between R(-1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(-1,0,0) and R(0,0,0)
Computing the AO overlaps between R(-1,1,0) and R(0,0,0)
Computing the AO overlaps between R(0,-1,0) and R(0,0,0)
Computing the AO overlaps between R(0,1,0) and R(0,0,0)
Computing the AO overlaps between R(1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(1,0,0) and R(0,0,0)
Computing the AO overlaps between R(1,1,0) and R(0,0,0)
Done with computing atomic orbital overlaps. Elapsed time: 0.25084924697875977
Turning the MATRIX to numpy array...
Done with transforming MATRIX 2 numpy array. Elapsed time: 0.055190086364746094
Resorting eigenvectors elements...
Done with resorting eigenvectors elements. Elapsed time: 0.004269123077392578
Computing and saving molecular orbital overlaps...
Done with computing molecular orbital overlaps. Elapsed time: 0.05226731300354004
Removing unnecessary wfn files...
Done with step 81. Elapsed time: 4.679870128631592
-----------------------Step 82-----------------------
**************** Running CP2K ****************
Step 82 Computing the OT method wfn file...
Done with OT wfn. Elapsed time: 2.129059076309204
Computing the wfn file using diagonalization method...
Done with diagonalization. Elapsed time: 1.856391191482544
Done with step 82 Elapsed time: 4.010233402252197
Creating shell...
Done with creating shell. Elapsed time: 0.047313690185546875
Reading energies and eigenvectors....
Done with reading energies and eigenvectors. Elapsed time: 0.15960979461669922
Computing atomic orbital overlap matrix...
Computing the AO overlaps between R(-1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(-1,0,0) and R(0,0,0)
Computing the AO overlaps between R(-1,1,0) and R(0,0,0)
Computing the AO overlaps between R(0,-1,0) and R(0,0,0)
Computing the AO overlaps between R(0,1,0) and R(0,0,0)
Computing the AO overlaps between R(1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(1,0,0) and R(0,0,0)
Computing the AO overlaps between R(1,1,0) and R(0,0,0)
Done with computing atomic orbital overlaps. Elapsed time: 0.24788522720336914
Turning the MATRIX to numpy array...
Done with transforming MATRIX 2 numpy array. Elapsed time: 0.055344343185424805
Resorting eigenvectors elements...
Done with resorting eigenvectors elements. Elapsed time: 0.004269599914550781
Computing and saving molecular orbital overlaps...
Done with computing molecular orbital overlaps. Elapsed time: 0.048666954040527344
Removing unnecessary wfn files...
Done with step 82. Elapsed time: 4.614776372909546
-----------------------Step 83-----------------------
**************** Running CP2K ****************
Step 83 Computing the OT method wfn file...
Done with OT wfn. Elapsed time: 2.043741226196289
Computing the wfn file using diagonalization method...
Done with diagonalization. Elapsed time: 1.9213716983795166
Done with step 83 Elapsed time: 4.040559768676758
Creating shell...
Done with creating shell. Elapsed time: 0.04718184471130371
Reading energies and eigenvectors....
Done with reading energies and eigenvectors. Elapsed time: 0.15917134284973145
Computing atomic orbital overlap matrix...
Computing the AO overlaps between R(-1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(-1,0,0) and R(0,0,0)
Computing the AO overlaps between R(-1,1,0) and R(0,0,0)
Computing the AO overlaps between R(0,-1,0) and R(0,0,0)
Computing the AO overlaps between R(0,1,0) and R(0,0,0)
Computing the AO overlaps between R(1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(1,0,0) and R(0,0,0)
Computing the AO overlaps between R(1,1,0) and R(0,0,0)
Done with computing atomic orbital overlaps. Elapsed time: 0.24892449378967285
Turning the MATRIX to numpy array...
Done with transforming MATRIX 2 numpy array. Elapsed time: 0.055852651596069336
Resorting eigenvectors elements...
Done with resorting eigenvectors elements. Elapsed time: 0.0041773319244384766
Computing and saving molecular orbital overlaps...
Done with computing molecular orbital overlaps. Elapsed time: 0.05595111846923828
Removing unnecessary wfn files...
Done with step 83. Elapsed time: 4.648331165313721
-----------------------Step 84-----------------------
**************** Running CP2K ****************
Step 84 Computing the OT method wfn file...
Done with OT wfn. Elapsed time: 2.041367292404175
Computing the wfn file using diagonalization method...
Done with diagonalization. Elapsed time: 1.8804919719696045
Done with step 84 Elapsed time: 3.948129892349243
Creating shell...
Done with creating shell. Elapsed time: 0.04464888572692871
Reading energies and eigenvectors....
Done with reading energies and eigenvectors. Elapsed time: 0.1548168659210205
Computing atomic orbital overlap matrix...
Computing the AO overlaps between R(-1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(-1,0,0) and R(0,0,0)
Computing the AO overlaps between R(-1,1,0) and R(0,0,0)
Computing the AO overlaps between R(0,-1,0) and R(0,0,0)
Computing the AO overlaps between R(0,1,0) and R(0,0,0)
Computing the AO overlaps between R(1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(1,0,0) and R(0,0,0)
Computing the AO overlaps between R(1,1,0) and R(0,0,0)
Done with computing atomic orbital overlaps. Elapsed time: 0.28989529609680176
Turning the MATRIX to numpy array...
Done with transforming MATRIX 2 numpy array. Elapsed time: 0.055088043212890625
Resorting eigenvectors elements...
Done with resorting eigenvectors elements. Elapsed time: 0.004177570343017578
Computing and saving molecular orbital overlaps...
Done with computing molecular orbital overlaps. Elapsed time: 0.06805777549743652
Removing unnecessary wfn files...
Done with step 84. Elapsed time: 4.602964878082275
-----------------------Step 85-----------------------
**************** Running CP2K ****************
Step 85 Computing the OT method wfn file...
Done with OT wfn. Elapsed time: 2.186746120452881
Computing the wfn file using diagonalization method...
Done with diagonalization. Elapsed time: 1.8610453605651855
Done with step 85 Elapsed time: 4.074854612350464
Creating shell...
Done with creating shell. Elapsed time: 0.0471494197845459
Reading energies and eigenvectors....
Done with reading energies and eigenvectors. Elapsed time: 0.1590709686279297
Computing atomic orbital overlap matrix...
Computing the AO overlaps between R(-1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(-1,0,0) and R(0,0,0)
Computing the AO overlaps between R(-1,1,0) and R(0,0,0)
Computing the AO overlaps between R(0,-1,0) and R(0,0,0)
Computing the AO overlaps between R(0,1,0) and R(0,0,0)
Computing the AO overlaps between R(1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(1,0,0) and R(0,0,0)
Computing the AO overlaps between R(1,1,0) and R(0,0,0)
Done with computing atomic orbital overlaps. Elapsed time: 0.29549217224121094
Turning the MATRIX to numpy array...
Done with transforming MATRIX 2 numpy array. Elapsed time: 0.05505681037902832
Resorting eigenvectors elements...
Done with resorting eigenvectors elements. Elapsed time: 0.004289865493774414
Computing and saving molecular orbital overlaps...
Done with computing molecular orbital overlaps. Elapsed time: 0.061861276626586914
Removing unnecessary wfn files...
Done with step 85. Elapsed time: 4.759810924530029
-----------------------Step 86-----------------------
**************** Running CP2K ****************
Step 86 Computing the OT method wfn file...
Done with OT wfn. Elapsed time: 2.0512616634368896
Computing the wfn file using diagonalization method...
Done with diagonalization. Elapsed time: 1.8132193088531494
Done with step 86 Elapsed time: 3.8890175819396973
Creating shell...
Done with creating shell. Elapsed time: 0.04718184471130371
Reading energies and eigenvectors....
	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

Done with reading energies and eigenvectors. Elapsed time: 0.15955734252929688
Computing atomic orbital overlap matrix...
Computing the AO overlaps between R(-1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(-1,0,0) and R(0,0,0)
Computing the AO overlaps between R(-1,1,0) and R(0,0,0)
Computing the AO overlaps between R(0,-1,0) and R(0,0,0)
Computing the AO overlaps between R(0,1,0) and R(0,0,0)
Computing the AO overlaps between R(1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(1,0,0) and R(0,0,0)
Computing the AO overlaps between R(1,1,0) and R(0,0,0)
Done with computing atomic orbital overlaps. Elapsed time: 0.24966025352478027
Turning the MATRIX to numpy array...
Done with transforming MATRIX 2 numpy array. Elapsed time: 0.05514192581176758
Resorting eigenvectors elements...
Done with resorting eigenvectors elements. Elapsed time: 0.004198312759399414
Computing and saving molecular orbital overlaps...
Done with computing molecular orbital overlaps. Elapsed time: 0.07266402244567871
Removing unnecessary wfn files...
Done with step 86. Elapsed time: 4.5327231884002686
-----------------------Step 87-----------------------
**************** Running CP2K ****************
Step 87 Computing the OT method wfn file...
Done with OT wfn. Elapsed time: 2.0595316886901855
Computing the wfn file using diagonalization method...
Done with diagonalization. Elapsed time: 1.8241007328033447
Done with step 87 Elapsed time: 3.938288688659668
Creating shell...
Done with creating shell. Elapsed time: 0.04689979553222656
Reading energies and eigenvectors....
Done with reading energies and eigenvectors. Elapsed time: 0.1587233543395996
Computing atomic orbital overlap matrix...
Computing the AO overlaps between R(-1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(-1,0,0) and R(0,0,0)
Computing the AO overlaps between R(-1,1,0) and R(0,0,0)
Computing the AO overlaps between R(0,-1,0) and R(0,0,0)
Computing the AO overlaps between R(0,1,0) and R(0,0,0)
Computing the AO overlaps between R(1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(1,0,0) and R(0,0,0)
Computing the AO overlaps between R(1,1,0) and R(0,0,0)
Done with computing atomic orbital overlaps. Elapsed time: 0.26146650314331055
Turning the MATRIX to numpy array...
Done with transforming MATRIX 2 numpy array. Elapsed time: 0.05515694618225098
Resorting eigenvectors elements...
Done with resorting eigenvectors elements. Elapsed time: 0.004233598709106445
Computing and saving molecular orbital overlaps...
Done with computing molecular orbital overlaps. Elapsed time: 0.06006669998168945
Removing unnecessary wfn files...
Done with step 87. Elapsed time: 4.572179317474365
-----------------------Step 88-----------------------
**************** Running CP2K ****************
Step 88 Computing the OT method wfn file...
Done with OT wfn. Elapsed time: 2.046224355697632
Computing the wfn file using diagonalization method...
Done with diagonalization. Elapsed time: 1.9382867813110352
Done with step 88 Elapsed time: 4.031999349594116
Creating shell...
Done with creating shell. Elapsed time: 0.04427170753479004
Reading energies and eigenvectors....
Done with reading energies and eigenvectors. Elapsed time: 0.15544438362121582
Computing atomic orbital overlap matrix...
Computing the AO overlaps between R(-1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(-1,0,0) and R(0,0,0)
Computing the AO overlaps between R(-1,1,0) and R(0,0,0)
Computing the AO overlaps between R(0,-1,0) and R(0,0,0)
Computing the AO overlaps between R(0,1,0) and R(0,0,0)
Computing the AO overlaps between R(1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(1,0,0) and R(0,0,0)
Computing the AO overlaps between R(1,1,0) and R(0,0,0)
Done with computing atomic orbital overlaps. Elapsed time: 0.24825096130371094
Turning the MATRIX to numpy array...
Done with transforming MATRIX 2 numpy array. Elapsed time: 0.0560300350189209
Resorting eigenvectors elements...
Done with resorting eigenvectors elements. Elapsed time: 0.004310131072998047
Computing and saving molecular orbital overlaps...
Done with computing molecular orbital overlaps. Elapsed time: 0.0738825798034668
Removing unnecessary wfn files...
Done with step 88. Elapsed time: 4.6577088832855225
-----------------------Step 89-----------------------
**************** Running CP2K ****************
Step 89 Computing the OT method wfn file...
Done with OT wfn. Elapsed time: 2.1857731342315674
Computing the wfn file using diagonalization method...
Done with diagonalization. Elapsed time: 1.848116159439087
Done with step 89 Elapsed time: 4.063418388366699
Creating shell...
Done with creating shell. Elapsed time: 0.047240495681762695
Reading energies and eigenvectors....
Done with reading energies and eigenvectors. Elapsed time: 0.15925312042236328
Computing atomic orbital overlap matrix...
Computing the AO overlaps between R(-1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(-1,0,0) and R(0,0,0)
Computing the AO overlaps between R(-1,1,0) and R(0,0,0)
Computing the AO overlaps between R(0,-1,0) and R(0,0,0)
Computing the AO overlaps between R(0,1,0) and R(0,0,0)
Computing the AO overlaps between R(1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(1,0,0) and R(0,0,0)
Computing the AO overlaps between R(1,1,0) and R(0,0,0)
Done with computing atomic orbital overlaps. Elapsed time: 0.24697279930114746
Turning the MATRIX to numpy array...
Done with transforming MATRIX 2 numpy array. Elapsed time: 0.05500340461730957
Resorting eigenvectors elements...
Done with resorting eigenvectors elements. Elapsed time: 0.004155874252319336
Computing and saving molecular orbital overlaps...
Done with computing molecular orbital overlaps. Elapsed time: 0.05799984931945801
Removing unnecessary wfn files...
Done with step 89. Elapsed time: 4.682357311248779
-----------------------Step 90-----------------------
**************** Running CP2K ****************
Step 90 Computing the OT method wfn file...
Done with OT wfn. Elapsed time: 2.006561517715454
Computing the wfn file using diagonalization method...
Done with diagonalization. Elapsed time: 1.9301905632019043
Done with step 90 Elapsed time: 3.9637773036956787
Creating shell...
Done with creating shell. Elapsed time: 0.0471038818359375
Reading energies and eigenvectors....
Done with reading energies and eigenvectors. Elapsed time: 0.15938448905944824
Computing atomic orbital overlap matrix...
Computing the AO overlaps between R(-1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(-1,0,0) and R(0,0,0)
Computing the AO overlaps between R(-1,1,0) and R(0,0,0)
Computing the AO overlaps between R(0,-1,0) and R(0,0,0)
Computing the AO overlaps between R(0,1,0) and R(0,0,0)
Computing the AO overlaps between R(1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(1,0,0) and R(0,0,0)
Computing the AO overlaps between R(1,1,0) and R(0,0,0)
Done with computing atomic orbital overlaps. Elapsed time: 0.24985098838806152
Turning the MATRIX to numpy array...
Done with transforming MATRIX 2 numpy array. Elapsed time: 0.05508303642272949
Resorting eigenvectors elements...
Done with resorting eigenvectors elements. Elapsed time: 0.004207611083984375
Computing and saving molecular orbital overlaps...
Done with computing molecular orbital overlaps. Elapsed time: 0.05354428291320801
Removing unnecessary wfn files...
Done with step 90. Elapsed time: 4.572768449783325
-----------------------Step 91-----------------------
**************** Running CP2K ****************
Step 91 Computing the OT method wfn file...
Done with OT wfn. Elapsed time: 2.027142286300659
Computing the wfn file using diagonalization method...
Done with diagonalization. Elapsed time: 1.8744533061981201
Done with step 91 Elapsed time: 3.942445755004883
Creating shell...
Done with creating shell. Elapsed time: 0.04706430435180664
Reading energies and eigenvectors....
Done with reading energies and eigenvectors. Elapsed time: 0.159257173538208
Computing atomic orbital overlap matrix...
Computing the AO overlaps between R(-1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(-1,0,0) and R(0,0,0)
Computing the AO overlaps between R(-1,1,0) and R(0,0,0)
Computing the AO overlaps between R(0,-1,0) and R(0,0,0)
	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads

	Finished computing overlap integral
Will scale over 12 OpenMP threads
rm: cannot remove ‘*.tdwfn*’: No such file or directory
/projects/academic/alexeyak/mohammad/software/miniconda3/envs/libra/lib/python3.6/importlib/_bootstrap.py:219: RuntimeWarning: to-Python converter for std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > > already registered; second conversion method ignored.
  return f(*args, **kwds)
/projects/academic/alexeyak/mohammad/software/miniconda3/envs/libra/lib/python3.6/importlib/_bootstrap.py:219: RuntimeWarning: to-Python converter for boost::python::detail::container_element<std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >, unsigned long, boost::python::detail::final_vector_derived_policies<std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >, false> > already registered; second conversion method ignored.
  return f(*args, **kwds)
/projects/academic/alexeyak/mohammad/software/miniconda3/envs/libra/lib/python3.6/importlib/_bootstrap.py:219: RuntimeWarning: to-Python converter for std::vector<std::vector<float, std::allocator<float> >, std::allocator<std::vector<float, std::allocator<float> > > > already registered; second conversion method ignored.
  return f(*args, **kwds)
/projects/academic/alexeyak/mohammad/software/miniconda3/envs/libra/lib/python3.6/importlib/_bootstrap.py:219: RuntimeWarning: to-Python converter for boost::python::detail::container_element<std::vector<std::vector<float, std::allocator<float> >, std::allocator<std::vector<float, std::allocator<float> > > >, unsigned long, boost::python::detail::final_vector_derived_policies<std::vector<std::vector<float, std::allocator<float> >, std::allocator<std::vector<float, std::allocator<float> > > >, false> > already registered; second conversion method ignored.
  return f(*args, **kwds)
/projects/academic/alexeyak/mohammad/software/miniconda3/envs/libra/lib/python3.6/importlib/_bootstrap.py:219: RuntimeWarning: to-Python converter for std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > > already registered; second conversion method ignored.
  return f(*args, **kwds)
/projects/academic/alexeyak/mohammad/software/miniconda3/envs/libra/lib/python3.6/importlib/_bootstrap.py:219: RuntimeWarning: to-Python converter for boost::python::detail::container_element<std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >, unsigned long, boost::python::detail::final_vector_derived_policies<std::vector<std::vector<double, std::allocator<double> >, std::allocator<std::vector<double, std::allocator<double> > > >, false> > already registered; second conversion method ignored.
  return f(*args, **kwds)
/projects/academic/alexeyak/mohammad/software/miniconda3/envs/libra/lib/python3.6/importlib/_bootstrap.py:219: RuntimeWarning: to-Python converter for std::vector<std::vector<std::complex<double>, std::allocator<std::complex<double> > >, std::allocator<std::vector<std::complex<double>, std::allocator<std::complex<double> > > > > already registered; second conversion method ignored.
  return f(*args, **kwds)
/projects/academic/alexeyak/mohammad/software/miniconda3/envs/libra/lib/python3.6/importlib/_bootstrap.py:219: RuntimeWarning: to-Python converter for boost::python::detail::container_element<std::vector<std::vector<std::complex<double>, std::allocator<std::complex<double> > >, std::allocator<std::vector<std::complex<double>, std::allocator<std::complex<double> > > > >, unsigned long, boost::python::detail::final_vector_derived_policies<std::vector<std::vector<std::complex<double>, std::allocator<std::complex<double> > >, std::allocator<std::vector<std::complex<double>, std::allocator<std::complex<double> > > > >, false> > already registered; second conversion method ignored.
  return f(*args, **kwds)

Computing the AO overlaps between R(0,1,0) and R(0,0,0)
Computing the AO overlaps between R(1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(1,0,0) and R(0,0,0)
Computing the AO overlaps between R(1,1,0) and R(0,0,0)
Done with computing atomic orbital overlaps. Elapsed time: 0.24842405319213867
Turning the MATRIX to numpy array...
Done with transforming MATRIX 2 numpy array. Elapsed time: 0.055063486099243164
Resorting eigenvectors elements...
Done with resorting eigenvectors elements. Elapsed time: 0.004184722900390625
Computing and saving molecular orbital overlaps...
Done with computing molecular orbital overlaps. Elapsed time: 0.06967353820800781
Removing unnecessary wfn files...
Done with step 91. Elapsed time: 4.574584484100342
-----------------------Step 92-----------------------
**************** Running CP2K ****************
Step 92 Computing the OT method wfn file...
Done with OT wfn. Elapsed time: 2.114006757736206
Computing the wfn file using diagonalization method...
Done with diagonalization. Elapsed time: 1.8861865997314453
Done with step 92 Elapsed time: 4.0456383228302
Creating shell...
Done with creating shell. Elapsed time: 0.04548788070678711
Reading energies and eigenvectors....
Done with reading energies and eigenvectors. Elapsed time: 0.15762948989868164
Computing atomic orbital overlap matrix...
Computing the AO overlaps between R(-1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(-1,0,0) and R(0,0,0)
Computing the AO overlaps between R(-1,1,0) and R(0,0,0)
Computing the AO overlaps between R(0,-1,0) and R(0,0,0)
Computing the AO overlaps between R(0,1,0) and R(0,0,0)
Computing the AO overlaps between R(1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(1,0,0) and R(0,0,0)
Computing the AO overlaps between R(1,1,0) and R(0,0,0)
Done with computing atomic orbital overlaps. Elapsed time: 0.30154895782470703
Turning the MATRIX to numpy array...
Done with transforming MATRIX 2 numpy array. Elapsed time: 0.07094573974609375
Resorting eigenvectors elements...
Done with resorting eigenvectors elements. Elapsed time: 0.004571676254272461
Computing and saving molecular orbital overlaps...
Done with computing molecular orbital overlaps. Elapsed time: 0.05793142318725586
Removing unnecessary wfn files...
Done with step 92. Elapsed time: 4.720136404037476
-----------------------Step 93-----------------------
**************** Running CP2K ****************
Step 93 Computing the OT method wfn file...
Done with OT wfn. Elapsed time: 2.0878818035125732
Computing the wfn file using diagonalization method...
Done with diagonalization. Elapsed time: 1.885289192199707
Done with step 93 Elapsed time: 4.000368595123291
Creating shell...
Done with creating shell. Elapsed time: 0.044216156005859375
Reading energies and eigenvectors....
Done with reading energies and eigenvectors. Elapsed time: 0.15585756301879883
Computing atomic orbital overlap matrix...
Computing the AO overlaps between R(-1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(-1,0,0) and R(0,0,0)
Computing the AO overlaps between R(-1,1,0) and R(0,0,0)
Computing the AO overlaps between R(0,-1,0) and R(0,0,0)
Computing the AO overlaps between R(0,1,0) and R(0,0,0)
Computing the AO overlaps between R(1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(1,0,0) and R(0,0,0)
Computing the AO overlaps between R(1,1,0) and R(0,0,0)
Done with computing atomic orbital overlaps. Elapsed time: 0.25224876403808594
Turning the MATRIX to numpy array...
Done with transforming MATRIX 2 numpy array. Elapsed time: 0.05528855323791504
Resorting eigenvectors elements...
Done with resorting eigenvectors elements. Elapsed time: 0.004286527633666992
Computing and saving molecular orbital overlaps...
Done with computing molecular orbital overlaps. Elapsed time: 0.12084007263183594
Removing unnecessary wfn files...
Done with step 93. Elapsed time: 4.68012261390686
-----------------------Step 94-----------------------
**************** Running CP2K ****************
Step 94 Computing the OT method wfn file...
Done with OT wfn. Elapsed time: 2.113839626312256
Computing the wfn file using diagonalization method...
Done with diagonalization. Elapsed time: 1.8410887718200684
Done with step 94 Elapsed time: 3.9830403327941895
Creating shell...
Done with creating shell. Elapsed time: 0.04688239097595215
Reading energies and eigenvectors....
Done with reading energies and eigenvectors. Elapsed time: 0.1591663360595703
Computing atomic orbital overlap matrix...
Computing the AO overlaps between R(-1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(-1,0,0) and R(0,0,0)
Computing the AO overlaps between R(-1,1,0) and R(0,0,0)
Computing the AO overlaps between R(0,-1,0) and R(0,0,0)
Computing the AO overlaps between R(0,1,0) and R(0,0,0)
Computing the AO overlaps between R(1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(1,0,0) and R(0,0,0)
Computing the AO overlaps between R(1,1,0) and R(0,0,0)
Done with computing atomic orbital overlaps. Elapsed time: 0.2623732089996338
Turning the MATRIX to numpy array...
Done with transforming MATRIX 2 numpy array. Elapsed time: 0.05532693862915039
Resorting eigenvectors elements...
Done with resorting eigenvectors elements. Elapsed time: 0.0041692256927490234
Computing and saving molecular orbital overlaps...
Done with computing molecular orbital overlaps. Elapsed time: 0.07115030288696289
Removing unnecessary wfn files...
Done with step 94. Elapsed time: 4.619427919387817
-----------------------Step 95-----------------------
**************** Running CP2K ****************
Step 95 Computing the OT method wfn file...
Done with OT wfn. Elapsed time: 2.2416751384735107
Computing the wfn file using diagonalization method...
Done with diagonalization. Elapsed time: 1.8155128955841064
Done with step 95 Elapsed time: 4.083779335021973
Creating shell...
Done with creating shell. Elapsed time: 0.0472865104675293
Reading energies and eigenvectors....
Done with reading energies and eigenvectors. Elapsed time: 0.1738419532775879
Computing atomic orbital overlap matrix...
Computing the AO overlaps between R(-1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(-1,0,0) and R(0,0,0)
Computing the AO overlaps between R(-1,1,0) and R(0,0,0)
Computing the AO overlaps between R(0,-1,0) and R(0,0,0)
Computing the AO overlaps between R(0,1,0) and R(0,0,0)
Computing the AO overlaps between R(1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(1,0,0) and R(0,0,0)
Computing the AO overlaps between R(1,1,0) and R(0,0,0)
Done with computing atomic orbital overlaps. Elapsed time: 0.29187488555908203
Turning the MATRIX to numpy array...
Done with transforming MATRIX 2 numpy array. Elapsed time: 0.05503654479980469
Resorting eigenvectors elements...
Done with resorting eigenvectors elements. Elapsed time: 0.004282474517822266
Computing and saving molecular orbital overlaps...
Done with computing molecular orbital overlaps. Elapsed time: 0.05004620552062988
Removing unnecessary wfn files...
Done with step 95. Elapsed time: 4.746410131454468
-----------------------Step 96-----------------------
**************** Running CP2K ****************
Step 96 Computing the OT method wfn file...
Done with OT wfn. Elapsed time: 2.0719923973083496
Computing the wfn file using diagonalization method...
Done with diagonalization. Elapsed time: 1.8192095756530762
Done with step 96 Elapsed time: 3.923154830932617
Creating shell...
Done with creating shell. Elapsed time: 0.047135114669799805
Reading energies and eigenvectors....
Done with reading energies and eigenvectors. Elapsed time: 0.15894651412963867
Computing atomic orbital overlap matrix...
Computing the AO overlaps between R(-1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(-1,0,0) and R(0,0,0)
Computing the AO overlaps between R(-1,1,0) and R(0,0,0)
Computing the AO overlaps between R(0,-1,0) and R(0,0,0)
Computing the AO overlaps between R(0,1,0) and R(0,0,0)
Computing the AO overlaps between R(1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(1,0,0) and R(0,0,0)
Computing the AO overlaps between R(1,1,0) and R(0,0,0)
Done with computing atomic orbital overlaps. Elapsed time: 0.24784135818481445
Turning the MATRIX to numpy array...
Done with transforming MATRIX 2 numpy array. Elapsed time: 0.05518007278442383
Resorting eigenvectors elements...
Done with resorting eigenvectors elements. Elapsed time: 0.004212617874145508
Computing and saving molecular orbital overlaps...
Done with computing molecular orbital overlaps. Elapsed time: 0.0628817081451416
Removing unnecessary wfn files...
Done with step 96. Elapsed time: 4.5362489223480225
-----------------------Step 97-----------------------
**************** Running CP2K ****************
Step 97 Computing the OT method wfn file...
Done with OT wfn. Elapsed time: 2.1310906410217285
Computing the wfn file using diagonalization method...
Done with diagonalization. Elapsed time: 1.8261950016021729
Done with step 97 Elapsed time: 3.9968385696411133
Creating shell...
Done with creating shell. Elapsed time: 0.04800248146057129
Reading energies and eigenvectors....
Done with reading energies and eigenvectors. Elapsed time: 0.17446208000183105
Computing atomic orbital overlap matrix...
Computing the AO overlaps between R(-1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(-1,0,0) and R(0,0,0)
Computing the AO overlaps between R(-1,1,0) and R(0,0,0)
Computing the AO overlaps between R(0,-1,0) and R(0,0,0)
Computing the AO overlaps between R(0,1,0) and R(0,0,0)
Computing the AO overlaps between R(1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(1,0,0) and R(0,0,0)
Computing the AO overlaps between R(1,1,0) and R(0,0,0)
Done with computing atomic orbital overlaps. Elapsed time: 0.25182080268859863
Turning the MATRIX to numpy array...
Done with transforming MATRIX 2 numpy array. Elapsed time: 0.05538034439086914
Resorting eigenvectors elements...
Done with resorting eigenvectors elements. Elapsed time: 0.004278898239135742
Computing and saving molecular orbital overlaps...
Done with computing molecular orbital overlaps. Elapsed time: 0.060736656188964844
Removing unnecessary wfn files...
Done with step 97. Elapsed time: 4.644220352172852
-----------------------Step 98-----------------------
**************** Running CP2K ****************
Step 98 Computing the OT method wfn file...
Done with OT wfn. Elapsed time: 2.0009968280792236
Computing the wfn file using diagonalization method...
Done with diagonalization. Elapsed time: 1.968301773071289
Done with step 98 Elapsed time: 3.9987123012542725
Creating shell...
Done with creating shell. Elapsed time: 0.047136545181274414
Reading energies and eigenvectors....
Done with reading energies and eigenvectors. Elapsed time: 0.1587069034576416
Computing atomic orbital overlap matrix...
Computing the AO overlaps between R(-1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(-1,0,0) and R(0,0,0)
Computing the AO overlaps between R(-1,1,0) and R(0,0,0)
Computing the AO overlaps between R(0,-1,0) and R(0,0,0)
Computing the AO overlaps between R(0,1,0) and R(0,0,0)
Computing the AO overlaps between R(1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(1,0,0) and R(0,0,0)
Computing the AO overlaps between R(1,1,0) and R(0,0,0)
Done with computing atomic orbital overlaps. Elapsed time: 0.29367852210998535
Turning the MATRIX to numpy array...
Done with transforming MATRIX 2 numpy array. Elapsed time: 0.0552058219909668
Resorting eigenvectors elements...
Done with resorting eigenvectors elements. Elapsed time: 0.004228115081787109
Computing and saving molecular orbital overlaps...
Done with computing molecular orbital overlaps. Elapsed time: 0.05189800262451172
Removing unnecessary wfn files...
Done with step 98. Elapsed time: 4.671231985092163
-----------------------Step 99-----------------------
**************** Running CP2K ****************
Step 99 Computing the OT method wfn file...
Done with OT wfn. Elapsed time: 2.194344997406006
Computing the wfn file using diagonalization method...
Done with diagonalization. Elapsed time: 1.9603033065795898
Done with step 99 Elapsed time: 4.181344509124756
Creating shell...
Done with creating shell. Elapsed time: 0.04426097869873047
Reading energies and eigenvectors....
Done with reading energies and eigenvectors. Elapsed time: 0.1615591049194336
Computing atomic orbital overlap matrix...
Computing the AO overlaps between R(-1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(-1,0,0) and R(0,0,0)
Computing the AO overlaps between R(-1,1,0) and R(0,0,0)
Computing the AO overlaps between R(0,-1,0) and R(0,0,0)
Computing the AO overlaps between R(0,1,0) and R(0,0,0)
Computing the AO overlaps between R(1,-1,0) and R(0,0,0)
Computing the AO overlaps between R(1,0,0) and R(0,0,0)
Computing the AO overlaps between R(1,1,0) and R(0,0,0)
Done with computing atomic orbital overlaps. Elapsed time: 0.25186944007873535
Turning the MATRIX to numpy array...
Done with transforming MATRIX 2 numpy array. Elapsed time: 0.05497288703918457
Resorting eigenvectors elements...
Done with resorting eigenvectors elements. Elapsed time: 0.004196882247924805
Computing and saving molecular orbital overlaps...
Done with computing molecular orbital overlaps. Elapsed time: 0.06381940841674805
Removing unnecessary wfn files...
Done with step 99. Elapsed time: 4.8011634349823
Done with the job!!!

	Finished computing overlap integral
